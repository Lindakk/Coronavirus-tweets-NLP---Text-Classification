{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1472453,"sourceType":"datasetVersion","datasetId":863934},{"sourceId":2626,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":1901,"modelId":244}],"dockerImageVersionId":30776,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport datasets\nfrom datasets import Dataset , Sequence , Value , Features , ClassLabel , DatasetDict\nimport re, string\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom transformers import TFBertModel\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-01T14:41:59.602008Z","iopub.execute_input":"2024-10-01T14:41:59.602806Z","iopub.status.idle":"2024-10-01T14:41:59.613479Z","shell.execute_reply.started":"2024-10-01T14:41:59.602764Z","shell.execute_reply":"2024-10-01T14:41:59.612528Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/covid-19-nlp-text-classification/Corona_NLP_test.csv\n/kaggle/input/covid-19-nlp-text-classification/Corona_NLP_train.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_hub as hub\nfrom keras.utils import to_categorical\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:37:14.876685Z","iopub.execute_input":"2024-10-01T16:37:14.877085Z","iopub.status.idle":"2024-10-01T16:37:14.883337Z","shell.execute_reply.started":"2024-10-01T16:37:14.877047Z","shell.execute_reply":"2024-10-01T16:37:14.882489Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"# Importing the dataset\ndf_train = pd.read_csv('/kaggle/input/covid-19-nlp-text-classification/Corona_NLP_train.csv', encoding='latin')\ndf_test = pd.read_csv('/kaggle/input/covid-19-nlp-text-classification/Corona_NLP_test.csv', encoding='latin')\n\n# Checking columns in the dataset\ndf_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:28:41.873940Z","iopub.execute_input":"2024-10-01T15:28:41.874345Z","iopub.status.idle":"2024-10-01T15:28:42.091960Z","shell.execute_reply.started":"2024-10-01T15:28:41.874309Z","shell.execute_reply":"2024-10-01T15:28:42.091006Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 41157 entries, 0 to 41156\nData columns (total 6 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   UserName       41157 non-null  int64 \n 1   ScreenName     41157 non-null  int64 \n 2   Location       32567 non-null  object\n 3   TweetAt        41157 non-null  object\n 4   OriginalTweet  41157 non-null  object\n 5   Sentiment      41157 non-null  object\ndtypes: int64(2), object(4)\nmemory usage: 1.9+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Data Preprocessing**","metadata":{}},{"cell_type":"code","source":"df_train.drop_duplicates(subset='OriginalTweet',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:28:45.293648Z","iopub.execute_input":"2024-10-01T15:28:45.294525Z","iopub.status.idle":"2024-10-01T15:28:45.313498Z","shell.execute_reply.started":"2024-10-01T15:28:45.294482Z","shell.execute_reply":"2024-10-01T15:28:45.312387Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"df_train = df_train[['OriginalTweet', 'Sentiment']].rename(columns={'OriginalTweet': 'tweets', 'Sentiment': 'sentiment'})\ndf_test = df_test[['OriginalTweet', 'Sentiment']].rename(columns={'OriginalTweet': 'tweets', 'Sentiment': 'sentiment'})\n\ndf_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:28:47.305671Z","iopub.execute_input":"2024-10-01T15:28:47.306242Z","iopub.status.idle":"2024-10-01T15:28:47.324775Z","shell.execute_reply.started":"2024-10-01T15:28:47.306197Z","shell.execute_reply":"2024-10-01T15:28:47.323787Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"                                              tweets           sentiment\n0  @MeNyrbie @Phil_Gahan @Chrisitv https://t.co/i...             Neutral\n1  advice Talk to your neighbours family to excha...            Positive\n2  Coronavirus Australia: Woolworths to give elde...            Positive\n3  My food stock is not the only one which is emp...            Positive\n4  Me, ready to go at supermarket during the #COV...  Extremely Negative","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tweets</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>@MeNyrbie @Phil_Gahan @Chrisitv https://t.co/i...</td>\n      <td>Neutral</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>advice Talk to your neighbours family to excha...</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Coronavirus Australia: Woolworths to give elde...</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>My food stock is not the only one which is emp...</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Me, ready to go at supermarket during the #COV...</td>\n      <td>Extremely Negative</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(\"Null values in the train dataset:\")\ndisplay(df_train.isna().mean())\nprint(\"Null values in the test dataset:\")\ndisplay(df_test.isna().mean())","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:28:48.758892Z","iopub.execute_input":"2024-10-01T15:28:48.759603Z","iopub.status.idle":"2024-10-01T15:28:48.785691Z","shell.execute_reply.started":"2024-10-01T15:28:48.759559Z","shell.execute_reply":"2024-10-01T15:28:48.784515Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Null values in the train dataset:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tweets       0.0\nsentiment    0.0\ndtype: float64"},"metadata":{}},{"name":"stdout","text":"Null values in the test dataset:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tweets       0.0\nsentiment    0.0\ndtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Plotting the distribution of sentiment labels ","metadata":{}},{"cell_type":"code","source":"df_train.sentiment.value_counts().plot(kind='bar')","metadata":{"execution":{"iopub.status.busy":"2024-10-01T14:44:48.125577Z","iopub.execute_input":"2024-10-01T14:44:48.125955Z","iopub.status.idle":"2024-10-01T14:44:48.399501Z","shell.execute_reply.started":"2024-10-01T14:44:48.125917Z","shell.execute_reply":"2024-10-01T14:44:48.398587Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='sentiment'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"label = preprocessing.LabelEncoder()\ny = label.fit_transform(df_train['sentiment'])\ny = to_categorical(y)\nprint(y[:5])","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:06.737143Z","iopub.execute_input":"2024-10-01T16:38:06.737560Z","iopub.status.idle":"2024-10-01T16:38:06.749112Z","shell.execute_reply.started":"2024-10-01T16:38:06.737526Z","shell.execute_reply":"2024-10-01T16:38:06.748025Z"},"trusted":true},"execution_count":86,"outputs":[{"name":"stdout","text":"[[0. 0. 1. 0. 0.]\n [0. 0. 0. 1. 0.]\n [0. 0. 0. 1. 0.]\n [0. 0. 0. 1. 0.]\n [1. 0. 0. 0. 0.]]\n","output_type":"stream"}]},{"cell_type":"code","source":"def convert_to_lower(text):\n    return text.lower()\n\n\ndef remove_emojis(text):\n    text = re.sub(r\"(?:\\@|https?\\://)\\S+\", \"\", text) #remove links and mentions\n    text = re.sub(r\"<.*?>\",\"\",text)\n    \n    \n    wierd_pattern = re.compile(\"[\"\n        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n        u\"\\U00002702-\\U000027B0\"\n        u\"\\U000024C2-\\U0001F251\"\n        u\"\\U0001f926-\\U0001f937\"\n        u'\\U00010000-\\U0010ffff'\n        u\"\\u200d\"\n        u\"\\u2640-\\u2642\"\n        u\"\\u2600-\\u2B55\"\n        u\"\\u23cf\"\n        u\"\\u23e9\"\n        u\"\\u231a\"\n        u\"\\u3030\"\n        u\"\\ufe0f\"\n        u\"\\u2069\"\n        u\"\\u2066\"\n        # u\"\\u200c\"\n        u\"\\u2068\"\n        u\"\\u2067\"\n        \"]+\", flags=re.UNICODE)\n    \n    \n    return wierd_pattern.sub(r'', text)\n\n\ndef remove_punctuation(text):\n    # Remove punctuation and carriage return/newline characters\n    cleaned_text = re.sub(r'[^\\w\\s]+|[\\r\\n]', '', text)\n    return cleaned_text\n\n\ndef remove_extra_white_spaces(text):\n    clean_text=text.strip()\n    single_char_pattern = r'\\s+[a-zA-Z]\\s+'\n    without_sc = re.sub(pattern=single_char_pattern, repl=\" \", string=clean_text)\n    return without_sc\n\n\ndef preprocessText(text):\n  return remove_extra_white_spaces(remove_punctuation(remove_emojis(convert_to_lower(text))))\n\n\n\ndf_train['tweets'] = df_train['tweets'].apply(preprocessText)\ndf_test['tweets'] = df_test['tweets'].apply(preprocessText)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:31.117652Z","iopub.execute_input":"2024-10-01T16:38:31.118424Z","iopub.status.idle":"2024-10-01T16:38:33.397607Z","shell.execute_reply.started":"2024-10-01T16:38:31.118378Z","shell.execute_reply":"2024-10-01T16:38:33.396795Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"markdown","source":"Check the lenght of the cleaned text","metadata":{}},{"cell_type":"code","source":"def check_len(df):\n    text_len=[]\n    for text in df.tweets:\n        tweet_len=len(text.split())\n        text_len.append(tweet_len)\n    return text_len","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:41.789040Z","iopub.execute_input":"2024-10-01T16:38:41.789905Z","iopub.status.idle":"2024-10-01T16:38:41.794629Z","shell.execute_reply.started":"2024-10-01T16:38:41.789863Z","shell.execute_reply":"2024-10-01T16:38:41.793571Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"code","source":"df_train['text_len'] = check_len(df_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:43.645446Z","iopub.execute_input":"2024-10-01T16:38:43.646299Z","iopub.status.idle":"2024-10-01T16:38:43.762859Z","shell.execute_reply.started":"2024-10-01T16:38:43.646259Z","shell.execute_reply":"2024-10-01T16:38:43.762109Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(7,5))\nax = sns.countplot(x='text_len', data=df_train[df_train['text_len']<10], palette='mako')\nplt.title('Training tweets with less than 10 words')\nplt.yticks([])\nax.bar_label(ax.containers[0])\nplt.ylabel('count')\nplt.xlabel('')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:46.885404Z","iopub.execute_input":"2024-10-01T16:38:46.885755Z","iopub.status.idle":"2024-10-01T16:38:47.104975Z","shell.execute_reply.started":"2024-10-01T16:38:46.885722Z","shell.execute_reply":"2024-10-01T16:38:47.103686Z"},"trusted":true},"execution_count":90,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 700x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Drop tweets that have 0 words.","metadata":{}},{"cell_type":"code","source":"df_train=df_train[df_train['text_len']>0]","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:49.592903Z","iopub.execute_input":"2024-10-01T16:38:49.593331Z","iopub.status.idle":"2024-10-01T16:38:49.601159Z","shell.execute_reply.started":"2024-10-01T16:38:49.593294Z","shell.execute_reply":"2024-10-01T16:38:49.600024Z"},"trusted":true},"execution_count":91,"outputs":[]},{"cell_type":"code","source":"df_train=df_train[['tweets','sentiment']]","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:38:50.929226Z","iopub.execute_input":"2024-10-01T16:38:50.929717Z","iopub.status.idle":"2024-10-01T16:38:50.939457Z","shell.execute_reply.started":"2024-10-01T16:38:50.929664Z","shell.execute_reply":"2024-10-01T16:38:50.938257Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport tensorflow as tf\n\ntrain_df,val_df= train_test_split(df_train, test_size=0.2, stratify=df_train['sentiment'], random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:29:27.961570Z","iopub.execute_input":"2024-10-01T15:29:27.962603Z","iopub.status.idle":"2024-10-01T15:29:27.989429Z","shell.execute_reply.started":"2024-10-01T15:29:27.962556Z","shell.execute_reply":"2024-10-01T15:29:27.988480Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"train_dataset=tf.data.Dataset.from_tensor_slices((train_df['tweets'].values,train_df['sentiment'].values))\nval_dataset=tf.data.Dataset.from_tensor_slices((val_df['tweets'].values,val_df['sentiment'].values))","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:29:29.897276Z","iopub.execute_input":"2024-10-01T15:29:29.897905Z","iopub.status.idle":"2024-10-01T15:29:29.925255Z","shell.execute_reply.started":"2024-10-01T15:29:29.897863Z","shell.execute_reply":"2024-10-01T15:29:29.924105Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"BATCH_SIZE = 32\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\n# For training dataset: shuffle, batch, cache, and prefetch\ntrain_ds = train_dataset.shuffle(buffer_size=len(train_df)).batch(BATCH_SIZE).cache().prefetch(buffer_size=AUTOTUNE)\n\n# For validation dataset: batch, cache, and prefetch (no shuffle)\nval_ds = val_dataset.batch(BATCH_SIZE).cache().prefetch(buffer_size=AUTOTUNE)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:29:30.682558Z","iopub.execute_input":"2024-10-01T15:29:30.683370Z","iopub.status.idle":"2024-10-01T15:29:30.699902Z","shell.execute_reply.started":"2024-10-01T15:29:30.683328Z","shell.execute_reply":"2024-10-01T15:29:30.698998Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"class_names=df_train.sentiment.unique()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:29:32.642621Z","iopub.execute_input":"2024-10-01T15:29:32.643523Z","iopub.status.idle":"2024-10-01T15:29:32.648786Z","shell.execute_reply.started":"2024-10-01T15:29:32.643467Z","shell.execute_reply":"2024-10-01T15:29:32.647691Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"for text_batch, label_batch in train_ds.take(1):\n  for i in range(3):\n    print(f'Review: {text_batch.numpy()[i]}')\n    label = label_batch.numpy()[i]\n    print(f'Label : {label} ({class_names[label]})')","metadata":{"execution":{"iopub.status.busy":"2024-10-01T15:29:33.420381Z","iopub.execute_input":"2024-10-01T15:29:33.420773Z","iopub.status.idle":"2024-10-01T15:29:33.494417Z","shell.execute_reply.started":"2024-10-01T15:29:33.420734Z","shell.execute_reply":"2024-10-01T15:29:33.493266Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"Review: b'to make sure the availability of essential items and no one is hoarding in the covid 19 pandemic ac shalimar carried out checking of grocery stores and pharmacies shopkeepers who were selling things at exorbitant prices were fined moreover ration bags were also given'\nLabel : 2 (0)\nReview: b'riyadh municipality says it has distributed 560230 units of free sanitizer in the region so far as part of precautionary measures to contain the spread of the deadly coronavirus'\nLabel : 3 (1)\nReview: b'coronavirus covid19 happy easter  good friday  easter  away game anticipation sunday  jesus  jesuschrist  religion  religiousfreedom  world  stayhome  keepput starwars  justkidding toiletpaper  facts places'\nLabel : 4 (4)\n","output_type":"stream"}]},{"cell_type":"code","source":"bert_model='https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1'\ntfhub_handle_preprocess = 'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1'\nbert_preprocess_model = hub.KerasLayer(tfhub_handle_preprocess)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:04:24.834316Z","iopub.execute_input":"2024-10-01T16:04:24.834999Z","iopub.status.idle":"2024-10-01T16:04:30.318147Z","shell.execute_reply.started":"2024-10-01T16:04:24.834942Z","shell.execute_reply":"2024-10-01T16:04:30.317311Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"bert_preprocess_model(['hello'])","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:04:33.458303Z","iopub.execute_input":"2024-10-01T16:04:33.458700Z","iopub.status.idle":"2024-10-01T16:04:33.541137Z","shell.execute_reply.started":"2024-10-01T16:04:33.458660Z","shell.execute_reply":"2024-10-01T16:04:33.539747Z"},"trusted":true},"execution_count":70,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[70], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mbert_preprocess_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mhello\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tf_keras/src/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow_hub/keras_layer.py:250\u001b[0m, in \u001b[0;36mKerasLayer.call\u001b[0;34m(self, inputs, training)\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;66;03m# Behave like BatchNormalization. (Dropout is different, b/181839368.)\u001b[39;00m\n\u001b[1;32m    249\u001b[0m     training \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 250\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[43msmart_cond\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msmart_cond\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    251\u001b[0m \u001b[43m                                 \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m                                 \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[38;5;66;03m# Unwrap dicts returned by signatures.\u001b[39;00m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output_key:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow_hub/keras_layer.py:252\u001b[0m, in \u001b[0;36mKerasLayer.call.<locals>.<lambda>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;66;03m# Behave like BatchNormalization. (Dropout is different, b/181839368.)\u001b[39;00m\n\u001b[1;32m    249\u001b[0m     training \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    250\u001b[0m   result \u001b[38;5;241m=\u001b[39m smart_cond\u001b[38;5;241m.\u001b[39msmart_cond(training,\n\u001b[1;32m    251\u001b[0m                                  \u001b[38;5;28;01mlambda\u001b[39;00m: f(training\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m),\n\u001b[0;32m--> 252\u001b[0m                                  \u001b[38;5;28;01mlambda\u001b[39;00m: \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m)\n\u001b[1;32m    254\u001b[0m \u001b[38;5;66;03m# Unwrap dicts returned by signatures.\u001b[39;00m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output_key:\n","\u001b[0;31mValueError\u001b[0m: Exception encountered when calling layer 'keras_layer_5' (type KerasLayer).\n\nCould not find matching concrete function to call loaded from the SavedModel. Got:\n  Positional arguments (3 total):\n    * ['hello']\n    * False\n    * None\n  Keyword arguments: {}\n\n Expected these arguments to match one of the following 4 option(s):\n\nOption 1:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nOption 2:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 3:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 4:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nCall arguments received by layer 'keras_layer_5' (type KerasLayer):\n  • inputs=[\"'hello'\"]\n  • training=None"],"ename":"ValueError","evalue":"Exception encountered when calling layer 'keras_layer_5' (type KerasLayer).\n\nCould not find matching concrete function to call loaded from the SavedModel. Got:\n  Positional arguments (3 total):\n    * ['hello']\n    * False\n    * None\n  Keyword arguments: {}\n\n Expected these arguments to match one of the following 4 option(s):\n\nOption 1:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nOption 2:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 3:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 4:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nCall arguments received by layer 'keras_layer_5' (type KerasLayer):\n  • inputs=[\"'hello'\"]\n  • training=None","output_type":"error"}]},{"cell_type":"code","source":"# import BERT-base pretrained model\nbert = AutoModel.from_pretrained('bert-base-uncased')\n\n# Load the BERT tokenizer\ntokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:30:25.869919Z","iopub.execute_input":"2024-10-01T16:30:25.870831Z","iopub.status.idle":"2024-10-01T16:30:25.911608Z","shell.execute_reply.started":"2024-10-01T16:30:25.870786Z","shell.execute_reply":"2024-10-01T16:30:25.910165Z"},"trusted":true},"execution_count":76,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[76], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# import BERT-base pretrained model\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m bert \u001b[38;5;241m=\u001b[39m \u001b[43mAutoModel\u001b[49m\u001b[38;5;241m.\u001b[39mfrom_pretrained(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbert-base-uncased\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Load the BERT tokenizer\u001b[39;00m\n\u001b[1;32m      5\u001b[0m tokenizer \u001b[38;5;241m=\u001b[39m BertTokenizerFast\u001b[38;5;241m.\u001b[39mfrom_pretrained(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbert-base-uncased\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'AutoModel' is not defined"],"ename":"NameError","evalue":"name 'AutoModel' is not defined","output_type":"error"}]},{"cell_type":"code","source":"import tensorflow_hub as hub\nimport tensorflow as tf\n\n\nbert_preproc_model = tf.saved_model.load(\"https://kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-preprocess/3\")\n\n# Create layer\nbert_preproc_layer = hub.KerasLayer(bert_preproc_model, name='preprocessing')\n\n# Test\ntext_test = ['this is such an amazing movie!']\ntext_preprocessed = bert_preproc_model(text_test)\n\nprint(f'Keys       : {list(text_preprocessed.keys())}')\nprint(f'Shape      : {text_preprocessed[\"input_word_ids\"].shape}')\nprint(f'Word Ids   : {text_preprocessed[\"input_word_ids\"][0, :12]}')\nprint(f'Input Mask : {text_preprocessed[\"input_mask\"][0, :12]}')\nprint(f'Type Ids   : {text_preprocessed[\"input_type_ids\"][0, :12]}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:23:01.373127Z","iopub.execute_input":"2024-10-01T16:23:01.373793Z","iopub.status.idle":"2024-10-01T16:23:01.548183Z","shell.execute_reply.started":"2024-10-01T16:23:01.373748Z","shell.execute_reply":"2024-10-01T16:23:01.546782Z"},"trusted":true},"execution_count":75,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnimplementedError\u001b[0m                        Traceback (most recent call last)","Cell \u001b[0;32mIn[75], line 5\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtensorflow_hub\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mhub\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mtf\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m bert_preproc_model \u001b[38;5;241m=\u001b[39m \u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msaved_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mhttps://kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-preprocess/3\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# Create layer\u001b[39;00m\n\u001b[1;32m      8\u001b[0m bert_preproc_layer \u001b[38;5;241m=\u001b[39m hub\u001b[38;5;241m.\u001b[39mKerasLayer(bert_preproc_model, name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpreprocessing\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:912\u001b[0m, in \u001b[0;36mload\u001b[0;34m(export_dir, tags, options)\u001b[0m\n\u001b[1;32m    910\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(export_dir, os\u001b[38;5;241m.\u001b[39mPathLike):\n\u001b[1;32m    911\u001b[0m   export_dir \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mfspath(export_dir)\n\u001b[0;32m--> 912\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[43mload_partial\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexport_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moptions\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mroot\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    913\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:1016\u001b[0m, in \u001b[0;36mload_partial\u001b[0;34m(export_dir, filters, tags, options)\u001b[0m\n\u001b[1;32m   1011\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m tags \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(tags, \u001b[38;5;28mset\u001b[39m):\n\u001b[1;32m   1012\u001b[0m   \u001b[38;5;66;03m# Supports e.g. tags=SERVING and tags=[SERVING]. Sets aren't considered\u001b[39;00m\n\u001b[1;32m   1013\u001b[0m   \u001b[38;5;66;03m# sequences for nest.flatten, so we put those through as-is.\u001b[39;00m\n\u001b[1;32m   1014\u001b[0m   tags \u001b[38;5;241m=\u001b[39m nest\u001b[38;5;241m.\u001b[39mflatten(tags)\n\u001b[1;32m   1015\u001b[0m saved_model_proto, debug_info \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m-> 1016\u001b[0m     \u001b[43mloader_impl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse_saved_model_with_debug_info\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexport_dir\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   1018\u001b[0m loader \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1019\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\u001b[38;5;28mlen\u001b[39m(saved_model_proto\u001b[38;5;241m.\u001b[39mmeta_graphs) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m\n\u001b[1;32m   1020\u001b[0m     saved_model_proto\u001b[38;5;241m.\u001b[39mmeta_graphs[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mHasField(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject_graph_def\u001b[39m\u001b[38;5;124m\"\u001b[39m)):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/saved_model/loader_impl.py:59\u001b[0m, in \u001b[0;36mparse_saved_model_with_debug_info\u001b[0;34m(export_dir)\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mparse_saved_model_with_debug_info\u001b[39m(export_dir):\n\u001b[1;32m     47\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Reads the savedmodel as well as the graph debug info.\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \n\u001b[1;32m     49\u001b[0m \u001b[38;5;124;03m  Args:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[38;5;124;03m    parsed. Missing graph debug info file is fine.\u001b[39;00m\n\u001b[1;32m     58\u001b[0m \u001b[38;5;124;03m  \"\"\"\u001b[39;00m\n\u001b[0;32m---> 59\u001b[0m   saved_model \u001b[38;5;241m=\u001b[39m \u001b[43mparse_saved_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexport_dir\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     61\u001b[0m   debug_info_path \u001b[38;5;241m=\u001b[39m file_io\u001b[38;5;241m.\u001b[39mjoin(\n\u001b[1;32m     62\u001b[0m       path_helpers\u001b[38;5;241m.\u001b[39mget_debug_dir(export_dir),\n\u001b[1;32m     63\u001b[0m       constants\u001b[38;5;241m.\u001b[39mDEBUG_INFO_FILENAME_PB)\n\u001b[1;32m     64\u001b[0m   debug_info \u001b[38;5;241m=\u001b[39m graph_debug_info_pb2\u001b[38;5;241m.\u001b[39mGraphDebugInfo()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/saved_model/loader_impl.py:104\u001b[0m, in \u001b[0;36mparse_saved_model\u001b[0;34m(export_dir)\u001b[0m\n\u001b[1;32m    102\u001b[0m \u001b[38;5;66;03m# Parse the SavedModel protocol buffer.\u001b[39;00m\n\u001b[1;32m    103\u001b[0m saved_model \u001b[38;5;241m=\u001b[39m saved_model_pb2\u001b[38;5;241m.\u001b[39mSavedModel()\n\u001b[0;32m--> 104\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[43mfile_io\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfile_exists\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_to_pb\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m    105\u001b[0m   \u001b[38;5;28;01mwith\u001b[39;00m file_io\u001b[38;5;241m.\u001b[39mFileIO(path_to_pb, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrb\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[1;32m    106\u001b[0m     file_content \u001b[38;5;241m=\u001b[39m f\u001b[38;5;241m.\u001b[39mread()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/lib/io/file_io.py:298\u001b[0m, in \u001b[0;36mfile_exists\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[38;5;129m@tf_export\u001b[39m(v1\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgfile.Exists\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m    297\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfile_exists\u001b[39m(filename):\n\u001b[0;32m--> 298\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfile_exists_v2\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/lib/io/file_io.py:290\u001b[0m, in \u001b[0;36mfile_exists_v2\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Determines whether a path exists or not.\u001b[39;00m\n\u001b[1;32m    252\u001b[0m \n\u001b[1;32m    253\u001b[0m \u001b[38;5;124;03m>>> with open(\"/tmp/x\", \"w\") as f:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    287\u001b[0m \u001b[38;5;124;03m  errors.OpError: Propagates any errors reported by the FileSystem API.\u001b[39;00m\n\u001b[1;32m    288\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    289\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 290\u001b[0m   \u001b[43m_pywrap_file_io\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFileExists\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcompat\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpath_to_bytes\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    291\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m errors\u001b[38;5;241m.\u001b[39mNotFoundError:\n\u001b[1;32m    292\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n","\u001b[0;31mUnimplementedError\u001b[0m: File system scheme 'https' not implemented (file: 'https://kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-preprocess/3/saved_model.pb')"],"ename":"UnimplementedError","evalue":"File system scheme 'https' not implemented (file: 'https://kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-preprocess/3/saved_model.pb')","output_type":"error"}]},{"cell_type":"code","source":"import tensorflow_hub as hub\nimport tensorflow as tf\n\n# Load the BERT preprocessing model\ntfhub_handle_preprocess = 'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1'\nbert_preprocess_model = hub.KerasLayer(tfhub_handle_preprocess)\n\n# Prepare your text for preprocessing\ntext_test = ['this is such an amazing movie!']\n\n# Preprocess the text\ntext_preprocessed = bert_preprocess_model(text_test)\n\n# Display the processed output\nprint(f'Keys       : {list(text_preprocessed.keys())}')\nprint(f'Shape      : {text_preprocessed[\"input_word_ids\"].shape}')\nprint(f'Word Ids   : {text_preprocessed[\"input_word_ids\"][0, :12]}')\nprint(f'Input Mask : {text_preprocessed[\"input_mask\"][0, :12]}')\nprint(f'Type Ids   : {text_preprocessed[\"input_type_ids\"][0, :12]}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T16:04:37.674505Z","iopub.execute_input":"2024-10-01T16:04:37.675260Z","iopub.status.idle":"2024-10-01T16:04:41.987783Z","shell.execute_reply.started":"2024-10-01T16:04:37.675219Z","shell.execute_reply":"2024-10-01T16:04:41.986538Z"},"trusted":true},"execution_count":71,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[71], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m text_test \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mthis is such an amazing movie!\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Preprocess the text\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m text_preprocessed \u001b[38;5;241m=\u001b[39m \u001b[43mbert_preprocess_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtext_test\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Display the processed output\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mKeys       : \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(text_preprocessed\u001b[38;5;241m.\u001b[39mkeys())\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tf_keras/src/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow_hub/keras_layer.py:250\u001b[0m, in \u001b[0;36mKerasLayer.call\u001b[0;34m(self, inputs, training)\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;66;03m# Behave like BatchNormalization. (Dropout is different, b/181839368.)\u001b[39;00m\n\u001b[1;32m    249\u001b[0m     training \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 250\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[43msmart_cond\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msmart_cond\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    251\u001b[0m \u001b[43m                                 \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m                                 \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[38;5;66;03m# Unwrap dicts returned by signatures.\u001b[39;00m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output_key:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow_hub/keras_layer.py:252\u001b[0m, in \u001b[0;36mKerasLayer.call.<locals>.<lambda>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;66;03m# Behave like BatchNormalization. (Dropout is different, b/181839368.)\u001b[39;00m\n\u001b[1;32m    249\u001b[0m     training \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    250\u001b[0m   result \u001b[38;5;241m=\u001b[39m smart_cond\u001b[38;5;241m.\u001b[39msmart_cond(training,\n\u001b[1;32m    251\u001b[0m                                  \u001b[38;5;28;01mlambda\u001b[39;00m: f(training\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m),\n\u001b[0;32m--> 252\u001b[0m                                  \u001b[38;5;28;01mlambda\u001b[39;00m: \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m)\n\u001b[1;32m    254\u001b[0m \u001b[38;5;66;03m# Unwrap dicts returned by signatures.\u001b[39;00m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output_key:\n","\u001b[0;31mValueError\u001b[0m: Exception encountered when calling layer 'keras_layer_6' (type KerasLayer).\n\nCould not find matching concrete function to call loaded from the SavedModel. Got:\n  Positional arguments (3 total):\n    * ['this is such an amazing movie!']\n    * False\n    * None\n  Keyword arguments: {}\n\n Expected these arguments to match one of the following 4 option(s):\n\nOption 1:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nOption 2:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 3:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 4:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nCall arguments received by layer 'keras_layer_6' (type KerasLayer):\n  • inputs=[\"'this is such an amazing movie!'\"]\n  • training=None"],"ename":"ValueError","evalue":"Exception encountered when calling layer 'keras_layer_6' (type KerasLayer).\n\nCould not find matching concrete function to call loaded from the SavedModel. Got:\n  Positional arguments (3 total):\n    * ['this is such an amazing movie!']\n    * False\n    * None\n  Keyword arguments: {}\n\n Expected these arguments to match one of the following 4 option(s):\n\nOption 1:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nOption 2:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 3:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='inputs/input_word_ids')}\n    * True\n    * None\n  Keyword arguments: {}\n\nOption 4:\n  Positional arguments (3 total):\n    * {'input_mask': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_mask'),\n 'input_type_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_type_ids'),\n 'input_word_ids': TensorSpec(shape=(None, None), dtype=tf.int32, name='input_word_ids')}\n    * False\n    * None\n  Keyword arguments: {}\n\nCall arguments received by layer 'keras_layer_6' (type KerasLayer):\n  • inputs=[\"'this is such an amazing movie!'\"]\n  • training=None","output_type":"error"}]},{"cell_type":"code","source":"from sklearn import preprocessing\nohe = preprocessing.OneHotEncoder()\ny_train = ohe.fit_transform(np.array(y_train).reshape(-1, 1)).toarray()\ny_valid = ohe.fit_transform(np.array(y_valid).reshape(-1, 1)).toarray()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:48:59.586777Z","iopub.execute_input":"2024-09-30T22:48:59.587223Z","iopub.status.idle":"2024-09-30T22:48:59.600515Z","shell.execute_reply.started":"2024-09-30T22:48:59.587182Z","shell.execute_reply":"2024-09-30T22:48:59.599503Z"},"trusted":true},"execution_count":148,"outputs":[]},{"cell_type":"code","source":"MAX_LEN=128\ndef tokenize(data,max_len=MAX_LEN) :\n    input_ids = []\n    attention_masks = []\n    for i in range(len(data)):\n        encoded = tokenizer.encode_plus(\n            data[i],\n            add_special_tokens=True,\n            max_length=MAX_LEN,\n            padding='max_length',\n            return_attention_mask=True\n        )\n        input_ids.append(encoded['input_ids'])\n        attention_masks.append(encoded['attention_mask'])\n    return np.array(input_ids),np.array(attention_masks)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:51:10.035323Z","iopub.execute_input":"2024-09-30T22:51:10.036038Z","iopub.status.idle":"2024-09-30T22:51:10.042488Z","shell.execute_reply.started":"2024-09-30T22:51:10.035993Z","shell.execute_reply":"2024-09-30T22:51:10.041557Z"},"trusted":true},"execution_count":154,"outputs":[]},{"cell_type":"code","source":"train_input_ids, train_attention_masks = tokenize(X_train, MAX_LEN)\nval_input_ids, val_attention_masks = tokenize(X_valid, MAX_LEN)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:51:19.705880Z","iopub.execute_input":"2024-09-30T22:51:19.706261Z","iopub.status.idle":"2024-09-30T22:51:29.987097Z","shell.execute_reply.started":"2024-09-30T22:51:19.706225Z","shell.execute_reply":"2024-09-30T22:51:29.986240Z"},"trusted":true},"execution_count":155,"outputs":[]},{"cell_type":"code","source":"bert_model = TFBertModel.from_pretrained('bert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:51:36.126302Z","iopub.execute_input":"2024-09-30T22:51:36.126708Z","iopub.status.idle":"2024-09-30T22:51:37.477412Z","shell.execute_reply.started":"2024-09-30T22:51:36.126668Z","shell.execute_reply":"2024-09-30T22:51:37.476692Z"},"trusted":true},"execution_count":156,"outputs":[{"name":"stderr","text":"Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.seq_relationship.bias', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.weight']\n- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.layers import Layer\n\nclass BertModelWrapper(Layer):\n    def __init__(self, bert_model):\n        super(BertModelWrapper, self).__init__()\n        self.bert_model = bert_model\n\n    def call(self, inputs):\n        input_ids, attention_mask = inputs\n        # Get the model's output\n        output = self.bert_model(input_ids=input_ids, attention_mask=attention_mask)\n        # Use pooler_output for classification\n        return output.pooler_output\n\ndef create_model(bert_model, max_len=MAX_LEN):\n    # Parameters\n    opt = tf.keras.optimizers.Adam(learning_rate=1e-5)\n    loss = tf.keras.losses.CategoricalCrossentropy()  # Use CategoricalCrossentropy for one-hot encoded labels\n    accuracy = tf.keras.metrics.CategoricalAccuracy()\n\n    # Input layers\n    input_ids = tf.keras.Input(shape=(max_len,), dtype='int32', name='input_ids')\n    attention_masks = tf.keras.Input(shape=(max_len,), dtype='int32', name='attention_mask')\n\n    # Call the BERT model via the custom wrapper\n    pooled_output = BertModelWrapper(bert_model)([input_ids, attention_masks])\n    \n    # Add a Dense layer for classification\n    output = tf.keras.layers.Dense(3, activation=\"softmax\")(pooled_output)\n\n    # Define the model\n    model = tf.keras.Model(inputs=[input_ids, attention_masks], outputs=output)\n    \n    # Compile the model\n    model.compile(optimizer=opt, loss=loss, metrics=[accuracy])\n    \n    return model\n\n# Create the model\nmodel = create_model(bert_model, MAX_LEN)\nmodel.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:58:24.090606Z","iopub.execute_input":"2024-09-30T22:58:24.091462Z","iopub.status.idle":"2024-09-30T22:58:32.471809Z","shell.execute_reply.started":"2024-09-30T22:58:24.091419Z","shell.execute_reply":"2024-09-30T22:58:32.470887Z"},"trusted":true},"execution_count":161,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_5\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_5\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ bert_model_wrapper… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│ (\u001b[38;5;33mBertModelWrapper\u001b[0m)  │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │      \u001b[38;5;34m2,307\u001b[0m │ bert_model_wrapp… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ bert_model_wrapper… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BertModelWrapper</span>)  │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,307</span> │ bert_model_wrapp… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,307\u001b[0m (9.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,307</span> (9.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,307\u001b[0m (9.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,307</span> (9.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"history_bert = model.fit([train_input_ids,train_attention_masks], y_train, validation_data=([val_input_ids,val_attention_masks], y_valid), epochs=4, batch_size=32)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make predictions\npredictions = bert_model.predict(dataset_test)\npredicted_labels = tf.argmax(predictions.logits, axis=1)","metadata":{},"execution_count":null,"outputs":[]}]}